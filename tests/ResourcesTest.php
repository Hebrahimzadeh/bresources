<?php

namespace Behamin\BResources\Tests;

use App\Http\Resources\TestResourceCollection;
use App\User;
use Behamin\BResources\Resources\BasicResource;

/**
 * @property \Behamin\BResources\Resources\BasicResource $resourceNamespace
 */
class ResourcesTest extends TestCase
{
    protected $users = [];
    protected $resourceName = 'TestResourceSecond';
    protected $resourceNamespace = 'App\Http\Resources\TestResourceSecond';

    protected $resourceCollectionName = 'TestResourceSecondCollection';
    protected $resourceCollectionNamespace = 'App\Http\Resources\TestResourceSecondCollection';

    public function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->deleteResources();

        \Artisan::call(
            'make:bresource',
            [
                'name' => $this->resourceName,
                '--collection' => true
            ]
        );
    }

    /**
     * A basic unit test example.
     *
     * @return void
     */
    public function testResourceFilterObjectDataByString()
    {
        $data = (object)[
            'a' => 'aaa',
            'b' => 'bbb'
        ];

        $resource = new BasicResource(['data' => $data], 'a');

        $expectData = 'aaa';
        $resData = $resource->toArray(null);
        $this->assertArrayHasKey('data', $resData);
        $this->assertContains($expectData, $resData['data']);
    }

    public function testResourceFilterArrayDataByArray()
    {
        $data = [
            'a' => 'aaa',
            'b' => 'bbb',
            'c' => 'ccc'
        ];
        $resource = new BasicResource(['data' => $data], ['a', 'c']);

        $expectData = 'ccc';
        $resData = $resource->toArray(null);
        $this->assertArrayHasKey('data', $resData);
        $this->assertContains($expectData, $resData['data']);
    }

    public function testResourceFilterModelDataByStringAndArray(){
        $userData = [
            'name' => 'test_name',
            'email' => 'test@test_email.com',
            'password' => 'test'
        ];
        $expectData = 'test_name';
        $this->users[] = $userModel = User::create($userData);

        $resource = new BasicResource(['data' => $userModel], 'name');
        $resData = $resource->toArray(null);
        $this->assertArrayHasKey('data', $resData);
        $this->assertContains($expectData, $resData['data']);
        /**
         *
         */
        $expectData = 'test@test_email.com';
        $resource = new BasicResource(['data' => $userModel], ['name', 'email']);
        $resData = $resource->toArray(null);
        $this->assertArrayHasKey('data', $resData);
        $this->assertContains($expectData, $resData['data']);
        /**
         *
         */
        $resource = new BasicResource(['data' => $userModel]);
        $resData = $resource->toArray(null);
        $this->assertEquals($userModel, $resData['data']);
        $userModel->delete();
    }

    /**
     *
     */
    public function testResourceFilterInResourceWithArrayData(){
        $data = [
            'a' => 'a2a2a2',
            'c' => 'c'
        ];
        $resource = new $this->resourceNamespace(['data' => $data], 'a');
        $resData = $resource->toArray(null);
        $this->assertEquals([], $resData['data']);


        $resource = new $this->resourceNamespace(['data' => $data]);
        $resData = $resource->toArray(null);
        $this->assertEquals($data, $resData['data']);
    }

    public function testResourceFilterInResourceWithModel()
    {
        $userData = [
            'name' => 'test_name',
            'email' => 'test@test_email.com',
            'password' => 'test'
        ];
        $this->users[] = $user = User::firstOrCreate($userData);
        $resource = new $this->resourceNamespace(['data' => $user]);
        $resData = $resource->toArray(null);

        $this->assertIsArray($resData);
        $this->assertArrayHasKey('data', $resData);
        $this->assertSame($user, $resData['data']);

        $resource = new $this->resourceNamespace(['data' => $user], true);
        $resData = $resource->toArray(null);

        $this->assertIsArray($resData);
        $this->assertArrayHasKey('data', $resData);
        $this->assertSame([], $resData['data']);
    }
    /**
     *
     */
    public function testResourceCollectionFilterInResourceCollectionWithArrayData(){
        $data = [
            'a' => 'a2a2a2',
            'b' => 'b2b2b2'
        ];
        /**
         * @var TestResourceCollection $resource
         */
       $resource = new $this->resourceCollectionNamespace(['data' => $data]);
        $resData = $resource->toArray(null);

        $this->assertArrayHasKey('data', $resData);
        $this->assertArrayHasKey('items', $resData['data']);
        $this->assertEquals($data, $resData['data']['items']);


        $resource = new $this->resourceCollectionNamespace(['data' => $data], true);
        $resData = $resource->toArray(null);
        $this->assertArrayHasKey('data', $resData);
        $this->assertArrayHasKey('items', $resData['data']);
        $this->assertSame([], $resData['data']['items']);
    }

    public function testResourceCollectionFilterInResourceCollectionWithModels()
    {
        $this->users = $users = factory(User::class, 3)->create();

        $resourceCollection = new $this->resourceCollectionNamespace(['data' => $users]);
        $resData = $resourceCollection->toArray(null);

        $this->assertIsArray($resData);
        $this->assertArrayHasKey('data', $resData);
        $this->assertArrayHasKey('items', $resData['data']);
        $this->assertSame($users, $resData['data']['items']);


        $resourceCollection = new $this->resourceCollectionNamespace(['data' => $users], true);
        $resData = $resourceCollection->toArray(null);
        $this->assertIsArray($resData);
        $this->assertArrayHasKey('data', $resData);
        $this->assertArrayHasKey('items', $resData['data']);
        $this->assertEquals([[], [], []], $resData['data']['items']->all());
    }

    protected function tearDown(): void
    {
        parent::tearDown(); // TODO: Change the autogenerated stub
        $this->deleteUsers();
        $this->deleteResources();
    }

    protected function deleteUsers(){
        foreach ($this->users as $user){
            try {
                if (! empty($user)) {
                    $user->delete();
                }
            }catch (\Exception $exception){

            }
        }
    }


    protected function deleteResources()
    {
        if (file_exists($file = $this->resourceFilePath($this->resourceName))) {
            unlink($file);
        }
        if (file_exists(
            $file = $this->resourceFilePath($this->resourceCollectionName)
        )
        ) {
            unlink($file);
        }
    }
}
